/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
char** uncommonFromSentences(char* s1, char* s2, int* returnSize) {
    *returnSize ^= *returnSize;
    char** r = (char**)malloc(1600);
    char* d[5200];
    int di[26];
    int i;
    i ^= i;
    while (i < 26) {
        di[i] ^= di[i];
        ++i;
    }
    
    int t = 1;
    int ci = 0;
    i ^= i;
    while (s1[i]) {
        if (s1[i] == ' ') {
            s1[i] ^= s1[i];
            t = 1;
        } else if (t) {
            ci = s1[i] - 97;
            d[ci * 200 + di[ci]] = &s1[i];
            ++di[ci];
            t ^= t;
        }
        ++i;
    }
    i ^= i;
    t = 1;
    while (s2[i]) {
        if (s2[i] == ' ') {
            s2[i] ^= s2[i];
            t = 1;
        } else if (t) {
            ci = s2[i] - 97;
            d[ci * 200 + di[ci]] = &s2[i];
            ++di[ci];
            t ^= t;
        }
        ++i;
    }

    int s = 1;
    int si;
    si ^= si;
    int cds;
    cds ^= cds;
    int sb[200];
    char* c1;
    char* c2;
    int j, k;
    
    i ^= i;
    while (i < 26) {
        ci = 200 * i;
        cds = di[i];
        
        j ^= j;
        while (j < cds) {
            sb[j] ^= sb[j];
            ++j;
        }

        j ^= j;
        while (j < cds) {
            k = j + 1;
            while (k < cds) {
                si ^= si;
                s = 1;
                c1 = d[ci + j];
                c2 = d[ci + k];
                while (c1[si] && c2[si]) {
                    if (c1[si] != c2[si]) {
                        s ^= s;
                        break;
                    }
                    ++si;
                }
                if (c1[si] || c2[si])
                    s ^= s;
                if (s) {
                    ++sb[j];
                    ++sb[k];
                    break;
                }
                ++k;
            }
            ++j;
        }

        j ^= j;
        while (j < cds) {
            if (!sb[j]) {
                r[*returnSize] = d[ci + j];
                ++(*returnSize);
            }
            ++j;
        }
        ++i;
    }
    return r;
}
